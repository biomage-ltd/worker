name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    name: Run tests
    # to ensure compatibility with the sqlite found in the
    # python:3.7-buster docker image, this runs on
    # ubuntu-20.04. earlier versions of ubuntu will break the test
    runs-on: ubuntu-20.04
    env:
      CI: "true"
    defaults:
      run:
        working-directory: python
    steps:
    - id: checkout
      name: Check out source code
      uses: actions/checkout@v2

    - id: setup-python
      name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    
    - id: cache-seek
      name: Check for pip cache hit
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - id: install
      name: Install dependencies
      run: |-
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt

    - id: test
      name: Run unit tests
      run: |-
        cd src/
        CLUSTER_ENV="test" python -m pytest --cov=.
      env:
        AWS_DEFAULT_REGION: 'eu-west-1'
        CLUSTER_ENV: 'test'

  build-docker:
    name: Build Docker container
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ['python', 'r']
    outputs:
      repo-name: ${{ steps.ref.outputs.repo-name }}
      tag: ${{ steps.ref.outputs.tag }}
    defaults:
      run:
        working-directory: ${{ matrix.project }}
    steps:
      - id: checkout
        name: Check out source code
        uses: actions/checkout@v2

      - id: ref
        name: Format docker tag and repository name.
        run: |-
          # This will take a ref like `refs/heads/master`
          # and turn it into `refs-heads-master`
          REF_ID=$(echo $GITHUB_REF | sed 's/\//-/g')

          # the final tag is something like:
          # refs-heads-master-a4f8bc313dae
          # this is what we push to ECR
          echo "::set-output name=tag::$REF_ID-$GITHUB_SHA"

          # This will take a GitHub repo name like `biomage-ltd/iac`
          # and turns it into `iac`. This will be the name of the
          # ECR repository.
          IMAGE_REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F '/' '{print $2}')
          echo "::set-output name=repo-name::$IMAGE_REPO_NAME"

      - id: set-up-creds
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - id: login-ecr
        name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
      
      - id: create-ecr-registry
        name: Create an ECR repository (if needed)
        # This will fail if the registry already exists, which is fine. If there is some other
        # error, the `push` step will fail instead.
        continue-on-error: true
        run: |-
          aws ecr create-repository --repository-name $REPO_NAME
        env:
          REPO_NAME: ${{ steps.ref.outputs.repo-name }}

      - id: build
        name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.project }}/
          file: ${{ matrix.project }}/Dockerfile
          platforms: linux/amd64
          target: prod
          tags: ${{ format('{0}/{1}:{2}-{3}', steps.login-ecr.outputs.registry, steps.ref.outputs.repo-name, steps.ref.outputs.tag, matrix.project) }}
          push: false

      - id: push
        if: github.ref == 'refs/heads/master'
        name: Push docker image to ECR
        run: |-
          echo Pushing image $IMAGE_NAME to ECR.
          docker push $IMAGE_NAME
        env:
          IMAGE_NAME: ${{ format('{0}/{1}:{2}-{3}', steps.login-ecr.outputs.registry, steps.ref.outputs.repo-name, steps.ref.outputs.tag, matrix.project) }}

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-docker
    strategy:
      matrix:
        environment: ['production']
    steps:
      - id: checkout
        name: Check out source code
        uses: actions/checkout@v2

      - id: setup-aws
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - id: login-ecr
        name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - id: install-yq
        name: Install yq for modifying the deployment spec.
        run: |-
          sudo snap install yq
      
      - id: fill-metadata
        name: Fill out a new HelmRelease resource
        run: |-
          REF_DASHED=$(echo $GITHUB_REF | sed 's/\//-/g')
          DEPLOYMENT_NAME=$(echo $GITHUB_REPOSITORY | awk -F '/' '{print $2}')
          echo "::set-output name=deployment-name::$DEPLOYMENT_NAME"

          yq w -d1 .flux.yaml metadata.name "$DEPLOYMENT_NAME" \
          | yq w -d1 - metadata.namespace "$DEPLOYMENT_NAME-$REF_DASHED" \
          | yq w -d1 - metadata.tags.githubSha "$GITHUB_SHA" \
          | yq w -d1 - spec.releaseName "$DEPLOYMENT_NAME" \
          | yq w -d1 - spec.values.serviceAccount.iamRole "arn:aws:iam::${{ steps.setup-aws.outputs.aws-account-id }}:role/worker-role-${{ matrix.environment }}" \
          | yq w -d0 - metadata.name "$DEPLOYMENT_NAME-$REF_DASHED" \
          > $DEPLOYMENT_NAME.yaml

          cat $DEPLOYMENT_NAME.yaml

      - id: fill-worker-instance
        name: Fill out worker instance base values
        run: |-
          REF_DASHED=$(echo $GITHUB_REF | sed 's/\//-/g')
          DEPLOYMENT_NAME="$(echo $GITHUB_REPOSITORY | awk -F '/' '{print $2}')"
          echo "::set-output name=instance-values-name::$DEPLOYMENT_NAME-instance"

          yq w -d0 chart-instance/values.yaml namespace "$DEPLOYMENT_NAME-$REF_DASHED" \
          | yq w -d0 - images.python "$IMAGE_NAME-python" \
          | yq w -d0 - images.r "$IMAGE_NAME-r" \
          > $DEPLOYMENT_NAME-instance.yaml

          cat $DEPLOYMENT_NAME-instance.yaml
        env:
          IMAGE_NAME: ${{ format('{0}/{1}:{2}', steps.login-ecr.outputs.registry, needs.build-docker.outputs.repo-name, needs.build-docker.outputs.tag) }}

      - id: disable-admin-enforcement
        if: always()
        name: Temporarily disable admin enforcement
        uses: benjefferies/branch-protection-bot@master
        with:
          access-token: ${{ secrets.API_TOKEN_GITHUB }}
          owner: biomage-ltd
          repo: iac

      - name: Push HelmRelease to iac repo
        if: github.ref == 'refs/heads/master'
        uses: dmnemec/copy_file_to_another_repo_action@v1.0.4
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: '${{ steps.fill-metadata.outputs.deployment-name }}.yaml'
          destination_repo: '${{ github.repository_owner }}/iac'
          destination_folder: 'releases/${{ matrix.environment }}'
          user_email: 'ci@biomage.net'
          user_name: 'Biomage CI/CD'

      - name: Push instance base values to iac repo
        if: github.ref == 'refs/heads/master'
        uses: dmnemec/copy_file_to_another_repo_action@v1.0.4
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: '${{ steps.fill-worker-instance.outputs.instance-values-name }}.yaml'
          destination_repo: '${{ github.repository_owner }}/iac'
          destination_folder: 'charts/'
          user_email: 'ci@biomage.net'
          user_name: 'Biomage CI/CD'

      - id: enable-admin-enforcement
        name: Re-enable admin enforcement
        uses: benjefferies/branch-protection-bot@master
        if: always()
        with:
          access-token: ${{ secrets.API_TOKEN_GITHUB }}
          owner: biomage-ltd
          repo: iac